{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Twitter Compose Rules is a set of custom ktlint rules to ensure that your composables don't fall into common pitfalls, that might be easy to miss in code reviews.</p>"},{"location":"#why","title":"Why","text":"<p>It can be challenging for big teams to start adopting Compose, particularly because not everyone will start at same time or with the same patterns. Twitter tried to ease the pain by creating a set of Compose static checks.</p> <p>Compose has lots of superpowers but also has a bunch of footguns to be aware of as seen in this Twitter Thread.</p> <p>This is where our static checks come in. We want to detect as many potential issues as we can, as quickly as we can. In this case we want an error to show prior to engineers having to review code. Similar to other static check libraries we hope this leads to a \"don't shoot the messengers\" philosphy which will foster healthy Compose adoption.</p>"},{"location":"#using-with-ktlint","title":"Using with ktlint","text":"<p>You can refer to the Using with ktlint documentation.</p>"},{"location":"#using-with-detekt","title":"Using with Detekt","text":"<p>You can refer to the Using with Detekt documentation.</p>"},{"location":"detekt/","title":"Using with Detekt","text":"<p>When using the Detekt Gradle Plugin, you can specify the dependency on this set of rules by using <code>detektPlugins</code>.</p> <pre><code>dependencies {\n    detektPlugins \"com.twitter.compose.rules:detekt:&lt;VERSION&gt;\"\n}\n</code></pre>"},{"location":"detekt/#using-with-detekt-cli","title":"Using with detekt CLI","text":"<p>The releases page contains an uber jar for each version release that can be used to run with the CLI version of detekt.</p> <pre><code>detekt -p detekt-twitter-compose-&lt;VERSION&gt;-all.jar -c your/config/detekt.yml\n</code></pre>"},{"location":"detekt/#enabling-rules","title":"Enabling rules","text":"<p>For the rules to be picked up, you will need to enable them in your <code>detekt.yml</code> configuration file.</p> <pre><code>TwitterCompose:\n  CompositionLocalAllowlist:\n    active: true\n    # You can optionally define a list of CompositionLocals that are allowed here\n    # allowedCompositionLocals: LocalSomething,LocalSomethingElse\n  CompositionLocalNaming:\n    active: true\n  ContentEmitterReturningValues:\n    active: true\n    # You can optionally add your own composables here\n    # contentEmitters: MyComposable,MyOtherComposable\n  ModifierComposable:\n    active: true\n  ModifierMissing:\n    active: true\n  ModifierReused:\n    active: true\n  ModifierWithoutDefault:\n    active: true\n  MultipleEmitters:\n    active: true\n      # You can optionally add your own composables here\n      # contentEmitters: MyComposable,MyOtherComposable\n  MutableParams:\n    active: true\n  ComposableNaming:\n    active: true\n    # You can optionally disable the checks in this rule for regex matches against the composable name (e.g. molecule presenters)\n    # allowedComposableFunctionNames: .*Presenter,.*MoleculePresenter\n  ComposableParamOrder:\n    active: true\n  PreviewNaming:\n    active: true\n  PreviewPublic:\n    active: true\n    # You can optionally disable that only previews with @PreviewParameter are flagged\n    # previewPublicOnlyIfParams: false\n  RememberMissing:\n    active: true\n  UnstableCollections:\n    active: true\n  ViewModelForwarding:\n    active: true\n  ViewModelInjection:\n    active: true\n</code></pre>"},{"location":"detekt/#disabling-a-specific-rule","title":"Disabling a specific rule","text":"<p>To disable a rule you have to follow the instructions from the Detekt documentation, and use the id of the rule you want to disable.</p> <p>For example, to disable <code>ComposableNaming</code>:</p> <pre><code>@Suppress(\"ComposableNaming\")\n@Composable\nfun myNameIsWrong() { }\n</code></pre>"},{"location":"ktlint/","title":"Using with ktlint","text":""},{"location":"ktlint/#using-with-kotlinter","title":"Using with Kotlinter","text":"<p>If using kotlinter, you can specify the dependency on this set of rules by using the <code>buildscript</code> classpath.</p> <pre><code>buildscript {\n    dependencies {\n        classpath \"com.twitter.compose.rules:ktlint:&lt;version&gt;\"\n    }\n}\n</code></pre>"},{"location":"ktlint/#using-with-ktlint-gradle","title":"Using with ktlint-gradle","text":"<p>Warning: This plugin doesn't currently support ktlint versions over 0.46.0, they are working to support it right now.</p> <p>If using ktlint-gradle, you can specify the dependency on this set of rules by using the <code>ktlintRuleset</code>.</p> <pre><code>dependencies {\n    ktlintRuleset \"com.twitter.compose.rules:ktlint:&lt;VERSION&gt;\"\n}\n</code></pre>"},{"location":"ktlint/#using-with-spotless","title":"Using with spotless","text":"<p>Warning: If using Spotless, there is no current way of enabling a custom ruleset like ours. You would need to use any of the alternatives listed here (like Kotlinter) to just run these rules.</p>"},{"location":"ktlint/#using-with-ktlint-cli-or-the-ktlint-unofficial-intellij-plugin","title":"Using with ktlint CLI or the ktlint (unofficial) IntelliJ plugin","text":"<p>The releases page contains an uber jar for each version release that can be used for these purposes.</p> <p>To use with ktlint CLI: <pre><code>ktlint -R ktlint-twitter-compose-&lt;VERSION&gt;-all.jar\n</code></pre></p> <p>You can use this same jar in the ktlint (unofficial) IntelliJ plugin if the rules are compiled against the same ktlint version used for that release. You can configure the custom ruleset in the preferences page of the plugin.</p>"},{"location":"ktlint/#configuring-rules","title":"Configuring rules","text":""},{"location":"ktlint/#providing-custom-content-emitters","title":"Providing custom content emitters","text":"<p>There are some rules (<code>twitter-compose:content-emitter-returning-values-check</code> and <code>twitter-compose:multiple-emitters-check</code>) that use predefined list of known composables that emit content. But you can add your own too! In your <code>.editorconfig</code> file, you'll need to add a <code>content_emitters</code> property followed by a list of composable names separated by commas. You would typically want the composables that are part of your custom design system to be in this list.</p> <pre><code>[*.{kt,kts}]\ntwitter_compose_content_emitters = MyComposable,MyOtherComposable\n</code></pre>"},{"location":"ktlint/#providing-a-list-of-allowed-compositionlocals","title":"Providing a list of allowed <code>CompositionLocal</code>s","text":"<p>For <code>compositionlocal-allowlist</code> rule you can define a list of <code>CompositionLocal</code>s that are allowed in your codebase.</p> <pre><code>[*.{kt,kts}]\ntwitter_compose_allowed_composition_locals = LocalSomething,LocalSomethingElse\n</code></pre>"},{"location":"ktlint/#make-it-so-that-all-preview-composables-must-be-not-public-no-exceptions","title":"Make it so that all @Preview composables must be not public, no exceptions","text":"<p>In <code>preview-public-check</code>, only previews with a <code>@PreviewParameter</code> are required to be non-public by default. However, if you want to make it so ALL <code>@Preview</code> composables are non-public, you can add this to your <code>.editorconfig</code> file:</p> <pre><code>[*.{kt,kts}]\ntwitter_compose_preview_public_only_if_params = false\n</code></pre>"},{"location":"ktlint/#allowing-matching-function-names","title":"Allowing matching function names","text":"<p>The <code>twitter-compose:naming-check</code> rule requires all composables that return a value to be lowercased. If you want to allow certain patterns though, you can configure a comma-separated list of matching regexes in your <code>.editorconfig</code> file:</p> <pre><code>[*.{kt,kts}]\ntwitter_compose_allowed_composable_function_names = .*Presenter,.*SomethingElse\n</code></pre>"},{"location":"ktlint/#disabling-a-specific-rule","title":"Disabling a specific rule","text":"<p>To disable a rule you have to follow the instructions from the ktlint documentation, and use the id of the rule you want to disable with the <code>twitter-compose</code> tag.</p> <p>For example, to disable <code>compose-naming-check</code>, the tag you'll need to disable is <code>twitter-compose:compose-naming-check</code>.</p> <pre><code>    /* ktlint-disable twitter-compose:compose-naming-check */\n    ... your code here\n    /* ktlint-enable twitter-compose:compose-naming-check */\n</code></pre>"},{"location":"rules/","title":"Ruleset","text":""},{"location":"rules/#state","title":"State","text":""},{"location":"rules/#hoist-all-the-things","title":"Hoist all the things","text":"<p>Compose is built upon the idea of a unidirectional data flow, which can be summarised as: data/state flows down, and events fire up. To implement that, Compose advocates for the pattern of hoisting state upwards, enabling the majority of your composable functions to be stateless. This has many benefits, including far easier testing.</p> <p>In practice, there are a few common things to look out for:</p> <ul> <li>Do not pass ViewModels (or objects from DI) down.</li> <li>Do not pass <code>State&lt;Foo&gt;</code> or <code>MutableState&lt;Bar&gt;</code> instances down.</li> </ul> <p>Instead pass down the relevant data to the function, and optional lambdas for callbacks.</p> <p>More information: State and Jetpack Compose</p> <p>Related rule: twitter-compose:vm-forwarding-check</p>"},{"location":"rules/#state-should-be-remembered-in-composables","title":"State should be remembered in composables","text":"<p>Be careful when using <code>mutableStateOf</code> (or any of the other state builders) to make sure that you <code>remember</code> the instance. If you don't <code>remember</code> the state instance, a new state instance will be created when the function is recomposed.</p> <p>Related rule: twitter-compose:remember-missing-check</p>"},{"location":"rules/#use-immutable-annotation-whenever-possible","title":"Use Immutable annotation whenever possible","text":"<p>The Compose Compiler tries to infer immutability and stability on value classes, but sometimes it gets it wrong, which then means that your UI will be doing more work than it needs. To force the compiler to see a class as 'immutable' you can apply the <code>@Immutable</code> annotation to the class.</p> <p>More info: Immutable docs and Composable metrics blog post</p> <p>Related rule: TBD</p>"},{"location":"rules/#avoid-using-unstable-collections","title":"Avoid using unstable collections","text":"<p>Collections are defined as interfaces (e.g. <code>List&lt;T&gt;</code>, <code>Map&lt;T&gt;</code>, <code>Set&lt;T&gt;</code>) in Kotlin, which can't guarantee that they are actually immutable. For example, you could write:</p> <pre><code>    val list: List&lt;String&gt; = mutableListOf&lt;String&gt;()\n</code></pre> <p>The variable is constant, its declared type is not mutable but its implementation is still mutable. The Compose compiler cannot be sure of the immutability of this class as it just sees the declared type and as such declares it as unstable.</p> <p>To force the compiler to see a collection as truly 'immutable' you have a couple of options.</p> <p>You can use Kotlinx Immutable Collections:</p> <pre><code>    val list: ImmutableList&lt;String&gt; = persistentListOf&lt;String&gt;()\n</code></pre> <p>Alternatively, you can wrap your collection in an annotated stable class to mark it as immutable for the Compose compiler.</p> <pre><code>    @Immutable\n    data class StringList(val items: List&lt;String&gt;)\n    // ...\n    val list: StringList = StringList(yourList)\n</code></pre> <p>Note: It is preferred to use Kotlinx Immutable Collections for this. As you can see, the wrapped case only includes the immutability promise with the annotation, but the underlying List is still mutable.</p> <p>More info: Jetpack Compose Stability Explained, Kotlinx Immutable Collections</p> <p>Related rule: twitter-compose:unstable-collections</p>"},{"location":"rules/#composables","title":"Composables","text":""},{"location":"rules/#do-not-use-inherently-mutable-types-as-parameters","title":"Do not use inherently mutable types as parameters","text":"<p>This practice follows on from the 'Hoist all the things' item above, where we said that state flows down. It might be tempting to pass mutable state down to a function to mutate the value.</p> <p>This is an anti-pattern though as it breaks the pattern of state flowing down, and events firing up. The mutation of the value is an event which should be modelled within the function API (a lambda callback).</p> <p>There are a few reasons for this, but the main one is that it is very easy to use a mutable object which does not trigger recomposition. Without triggering recomposition, your composables will not automatically update to reflect the updated value.</p> <p>Passing <code>ArrayList&lt;T&gt;</code>, <code>MutableState&lt;T&gt;</code>, <code>ViewModel</code> are common examples of this (but not limited to those types).</p> <p>Related rule: twitter-compose:mutable-params-check</p>"},{"location":"rules/#do-not-emit-content-and-return-a-result","title":"Do not emit content and return a result","text":"<p>Composable functions should either emit layout content, or return a value, but not both.</p> <p>If a composable should offer additional control surfaces to its caller, those control surfaces or callbacks should be provided as parameters to the composable function by the caller.</p> <p>More info: Compose API guidelines</p> <p>Related rule: twitter-compose:content-emitter-returning-values-check</p> <p>Note: To add your custom composables so they are used in this rule (things like your design system composables), you can add <code>composeEmitters</code> to this rule config in Detekt, or <code>compose_emitters</code> to your .editorconfig in ktlint.</p>"},{"location":"rules/#do-not-emit-multiple-pieces-of-content","title":"Do not emit multiple pieces of content","text":"<p>A composable function should emit either 0 or 1 pieces of layout, but no more. A composable function should be cohesive, and not rely on what function it is called from.</p> <p>You can see an example of what not to do below. <code>InnerContent()</code> emits a number of layout nodes and assumes that it will be called from a Column:</p> <pre><code>Column {\n    InnerContent()\n}\n\n@Composable\nprivate fun InnerContent() {\n    Text(...)\n    Image(...)\n    Button(...)\n}\n</code></pre> <p>However InnerContent could just as easily be called from a Row which would break all assumptions. Instead, InnerContent should be cohesive and emit a single layout node itself:</p> <p><pre><code>@Composable\nprivate fun InnerContent() {\n    Column {\n        Text(...)\n        Image(...)\n        Button(...)\n    }\n}\n</code></pre> Nesting of layouts has a drastically lower cost vs the view system, so developers should not try to minimize UI layers at the cost of correctness.</p> <p>There is a slight exception to this rule, which is when the function is defined as an extension function of an appropriate scope, like so: <pre><code>@Composable\nprivate fun ColumnScope.InnerContent() {\n    Text(...)\n    Image(...)\n    Button(...)\n}\n</code></pre> This effectively ties the function to be called from a Column, but is still not recommended (although permitted).</p> <p>Related rule: twitter-compose:multiple-emitters-check</p> <p>Note: To add your custom composables so they are used in this rule (things like your design system composables), you can add <code>composeEmitters</code> to this rule config in Detekt, or <code>compose_emitters</code> to your .editorconfig in ktlint.</p>"},{"location":"rules/#naming-compositionlocals-properly","title":"Naming CompositionLocals properly","text":"<p><code>CompositionLocal</code>s should be named by using the adjective <code>Local</code> as prefix, followed by a descriptive noun that describes the value they hold. This makes it easier to know when a value comes from a <code>CompositionLocal</code>. Given that these are implicit dependencies, we should make them obvious.</p> <p>More information: Naming CompositionLocals</p> <p>Related rule: twitter-compose:compositionlocal-naming</p>"},{"location":"rules/#naming-multipreview-annotations-properly","title":"Naming multipreview annotations properly","text":"<p>Multipreview annotations should be named by using <code>Previews</code> as suffix (or <code>Preview</code> if just one). These annotations have to be explicitly named to make sure that they are clearly identifiable as a <code>@Preview</code> alternative on its usages.</p> <p>More information: Multipreview annotations</p> <p>Related rule: twitter-compose:preview-naming</p>"},{"location":"rules/#naming-composable-functions-properly","title":"Naming @Composable functions properly","text":"<p>Composable functions that return <code>Unit</code> should start with an uppercase letter. They are considered declarative entities that can be either present or absent in a composition and therefore follow the naming rules for classes.</p> <p>However, Composable functions that return a value should start with a lowercase letter instead. They should follow the standard Kotlin Coding Conventions for the naming of functions for any function annotated <code>@Composable</code> that returns a value other than <code>Unit</code></p> <p>More information: Naming Unit @Composable functions as entities and Naming @Composable functions that return values</p> <p>Related rule: twitter-compose:naming-check</p>"},{"location":"rules/#ordering-composable-parameters-properly","title":"Ordering @Composable parameters properly","text":"<p>When writing Kotlin, it's a good practice to write the parameters for your methods by putting the mandatory parameters first, followed by the optional ones (aka the ones with default values). By doing so, we minimize the number times we will need to write the name for arguments explicitly.</p> <p>Modifiers occupy the first optional parameter slot to set a consistent expectation for developers that they can always provide a modifier as the final positional parameter to an element call for any given element's common case.</p> <p>More information: Kotlin default arguments, Modifier docs and Elements accept and respect a Modifier parameter.</p> <p>Related rule: twitter-compose:param-order-check</p>"},{"location":"rules/#make-dependencies-explicit","title":"Make dependencies explicit","text":""},{"location":"rules/#viewmodels","title":"ViewModels","text":"<p>When designing our composables, we should always try to be explicit about the dependencies they take in. If you acquire a ViewModel or an instance from DI in the body of the composable, you are making this dependency implicit, which has the downsides of making it hard to test and harder to reuse.</p> <p>To solve this problem, you should inject these dependencies as default values in the composable function.</p> <p>Let's see it with an example.</p> <p><pre><code>@Composable\nprivate fun MyComposable() {\n    val viewModel = viewModel&lt;MyViewModel&gt;()\n    // ...\n}\n</code></pre> In this composable, the dependencies are implicit. When testing it you would need to fake the internals of viewModel somehow to be able to acquire your intended ViewModel.</p> <p>But, if you change it to pass these instances via the composable function parameters, you could provide the instance you want directly in your tests without any extra effort. It would also have the upside of the function being explicit about its external dependencies in its signature.</p> <pre><code>@Composable\nprivate fun MyComposable(\n    viewModel: MyViewModel = viewModel(),\n) {\n    // ...\n}\n</code></pre> <p>Related rule: twitter-compose:vm-injection-check</p>"},{"location":"rules/#compositionlocals","title":"<code>CompositionLocal</code>s","text":"<p><code>CompositionLocal</code> makes a composable's behavior harder to reason about. As they create implicit dependencies, callers of composables that use them need to make sure that a value for every CompositionLocal is satisfied.</p> <p>Although uncommon, there are legit usecases for them, so this rule provides an allowlist so that you can add your <code>CompositionLocal</code> names to it so that they are not flagged by the rule.</p> <p>Related rule: twitter-compose:compositionlocal-allowlist</p> <p>Note: To add your custom <code>CompositionLocal</code> to your allowlist, you can add <code>allowedCompositionLocals</code> to this rule config in Detekt, or <code>allowed_composition_locals</code> to your .editorconfig in ktlint.</p>"},{"location":"rules/#preview-composables-should-not-be-public","title":"Preview composables should not be public","text":"<p>When a composable function exists solely because it's a <code>@Preview</code>, it doesn't need to have public visibility because it won't be used in actual UI. To prevent folks from using it unknowingly, we should restrict its visibility to <code>private</code>.</p> <p>Related rule: twitter-compose:preview-public-check</p> <p>Note: If you are using Detekt, this may conflict with Detekt's UnusedPrivateMember rule. Be sure to set Detekt's ignoreAnnotated configuration to ['Preview'] for compatibility with this rule.</p>"},{"location":"rules/#modifiers","title":"Modifiers","text":""},{"location":"rules/#when-should-i-expose-modifier-parameters","title":"When should I expose modifier parameters?","text":"<p>Modifiers are the beating heart of Compose UI. They encapsulate the idea of composition over inheritance, by allowing developers to attach logic and behavior to layouts.</p> <p>They are especially important for your public components, as they allow callers to customize the component to their wishes.</p> <p>More info: Always provide a Modifier parameter</p> <p>Related rule: twitter-compose:modifier-missing-check</p>"},{"location":"rules/#dont-re-use-modifiers","title":"Don't re-use modifiers","text":"<p>Modifiers which are passed in are designed so that they should be used by a single layout node in the composable function. If the provided modifier is used by multiple composables at different levels, unwanted behaviour can happen.</p> <p>In the following example we've exposed a public modifier parameter, and then passed it to the root Column, but we've also passed it to each of the descendant calls, with some extra modifiers on top:</p> <p><pre><code>@Composable\nprivate fun InnerContent(modifier: Modifier = Modifier) {\n    Column(modifier) {\n        Text(modifier.clickable(), ...)\n        Image(modifier.size(), ...)\n        Button(modifier, ...)\n    }\n}\n</code></pre> This is not recommended. Instead, the provided modifier should only be used on the Column. The descendant calls should use newly built modifiers, by using the empty Modifier object:</p> <pre><code>@Composable\nprivate fun InnerContent(modifier: Modifier = Modifier) {\n    Column(modifier) {\n        Text(Modifier.clickable(), ...)\n        Image(Modifier.size(), ...)\n        Button(Modifier, ...)\n    }\n}\n</code></pre> <p>Related rule: twitter-compose:modifier-reused-check</p>"},{"location":"rules/#modifiers-should-have-default-parameters","title":"Modifiers should have default parameters","text":"<p>Composables that accept a Modifier as a parameter to be applied to the whole component represented by the composable function should name the parameter modifier and assign the parameter a default value of <code>Modifier</code>. It should appear as the first optional parameter in the parameter list; after all required parameters (except for trailing lambda parameters) but before any other parameters with default values. Any default modifiers desired by a composable function should come after the modifier parameter's value in the composable function's implementation, keeping Modifier as the default parameter value.</p> <p>More info: Modifier documentation</p> <p>Related rule: twitter-compose:modifier-without-default-check</p>"},{"location":"rules/#avoid-modifier-extension-factory-functions","title":"Avoid Modifier extension factory functions","text":"<p>Using <code>@Composable</code> builder functions for modifiers is not recommended, as they cause unnecessary recompositions. To avoid this, you should use <code>Modifier.composed</code> instead, as it limits recomposition to just the modifier instance, rather than the whole function tree.</p> <p>Composed modifiers may be created outside of composition, shared across elements, and declared as top-level constants, making them more flexible than modifiers that can only be created via a <code>@Composable</code> function call, and easier to avoid accidentally sharing state across elements.</p> <p>More info: Modifier extensions, Composed modifiers in Jetpack Compose by Jorge Castillo and Composed modifiers in API guidelines</p> <p>Related rule: twitter-compose:modifier-composable-check</p>"}]}